-- Problem 12: Highly Divisible Triangle Number
--
-- The sequence of triangle numbers is generated by adding the natural numbers.
-- So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
-- ten terms would be:
--
-- 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
--
-- Let us list the factors of the first seven triangle numbers:
--
--  1: 1
--  3: 1,3
--  6: 1,2,3,6
-- 10: 1,2,5,10
-- 15: 1,3,5,15
-- 21: 1,3,7,21
-- 28: 1,2,4,7,14,28
--
-- We can see that 28 is the first triangle number to have over five divisors.
--
-- What is the value of the first triangle number to have over five hundred
-- divisors?

import Data.List

-- Infinite list of trangle numbers
triangles = 1:next 2 triangles
    where
        next n (a:xs) = a+n:(next (n+1) xs)

-- Slow version that calculates factors naively
factors' n = foldr f [] [x | x <- [1..truncate . sqrt $ fromIntegral n], mod n x == 0]
    where
        f x a = x:(div n x):a
solution' = head . dropWhile ((<500) . length . factors') $ triangles

-- Primes from problem 3
primes = 2:filter isPrime [3,5..]
isPrime = null . tail . primeFactors
primeFactors n = factor n primes
    where
        factor n (p:ps)
            | p * p > n    = [n]
            | mod n p == 0 = p:factor (div n p) (p:ps)
            | otherwise    = factor n ps

-- Number of factors of 'n'
-- https://en.wikipedia.org/wiki/Divisor_function
-- Calculate prime factors
-- Product of each exponent + 1
-- 120 = 2*2*2*3*5 =  2^3  *  3^1  *  5^1
-- count =           (3+1) * (1+1) * (1+1) = 16
numFactors = product . map ((1+) . length) . group . primeFactors

solution = head . dropWhile ((<500) . numFactors) $ triangles

main = do
    putStr "Solution: "
    putStrLn $ show solution
